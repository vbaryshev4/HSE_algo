import sys
from collections import deque

'''
Научитесь пользоваться стандартной структурой данных queue для целых чисел. 
Напишите программу, содержащую описание очереди и моделирующую работу очереди, 
реализовав все указанные здесь методы. 

Программа считывает последовательность команд и 
в зависимости от команды выполняет ту или иную операцию. 
После выполнения каждой команды программа должна вывести одну строчку.

Возможные команды для программы:

    push n
    Добавить в очередь число n (значение n задается после команды). 
    Программа должна вывести ok.

    pop
    Удалить из очереди первый элемент. 
    Программа должна вывести его значение.

    front
    Программа должна вывести значение первого элемента, 
    не удаляя его из очереди.

    size
    Программа должна вывести количество элементов в очереди.

    clear
    Программа должна очистить очередь и вывести ok.

    exit
    Программа должна вывести bye и завершить работу.

    Перед исполнением операций front и pop программа должна проверять, 
    содержится ли в очереди хотя бы один элемент. Если во входных данных встречается операция front или pop, и при этом очередь пуста, то программа должна вместо числового значения вывести строку error.

'''

class myQueue:

    def __init__(self):
        self.queue = deque()


    # Добавить в очередь число n (значение n задается после команды). 
    # Программа должна вывести ok.
    def push(self, n):
        self.queue.append(n)
        print('ok')


    # Удалить из очереди первый элемент. 
    # Программа должна вывести его значение.

    # Перед исполнением операций front и pop программа должна проверять, 
    # содержится ли в очереди хотя бы один элемент. 
    # Если во входных данных встречается операция front или pop, 
    # и при этом очередь пуста, то программа должна вместо числового значения 
    # вывести строку error.
    def pop(self):
        if len(self.queue) > 0:
            print(self.queue.popleft())
        else:
            print('error')


    # Программа должна вывести значение первого элемента, не удаляя его из очереди.

    # Перед исполнением операций front и pop программа должна проверять, 
    # содержится ли в очереди хотя бы один элемент. 
    # Если во входных данных встречается операция front или pop, 
    # и при этом очередь пуста, то программа должна вместо числового значения 
    # вывести строку error.
    def front(self):
        if len(self.queue) > 0:
            print(self.queue[0])
        else:
            print('error')


    # Программа должна вывести количество элементов в стеке.
    def size(self):
        print(len(self.queue))


    # Программа должна очистить стек и вывести ok.
    def clear(self):
        self.queue.clear()
        print('ok')


    # Программа должна вывести bye и завершить работу.
    def exit(self):
        print('bye')


def run(iter_obj):
    s = myQueue()
    for i in iter_obj:
        i = i.split()
        if i[0] == 'exit':
            getattr(s, i[0])()
            return None
        elif i[0] == 'push':
            getattr(s, i[0])(i[1])
        else:
            getattr(s, i[0])()


if 'test' in sys.argv:
    t = 'push 1 \n front \n exit \n'
    inp = t.strip().split('\n')
    run(inp)

else:
    inp = sys.stdin.read()
    inp = inp.strip().split('\n')
    run(inp)
