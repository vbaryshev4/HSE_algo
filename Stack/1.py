from collections import deque

'''
Научитесь пользоваться стандартной структурой данных stack для целых чисел. 
Напишите программу, содержащую описание стека и моделирующую работу стека, 
реализовав все указанные здесь методы. 
Программа считывает последовательность команд и в зависимости от команды 
выполняет ту или иную операцию. После выполнения каждой команды 
программа должна вывести одну строчку. Возможные команды для программы:

	push n
	Добавить в стек число n (значение n задается после команды). Программа должна вывести ok.

	pop
	Удалить из стека последний элемент. Программа должна вывести его значение.

	back
	Программа должна вывести значение последнего элемента, не удаляя его из стека.

	size
	Программа должна вывести количество элементов в стеке.

	clear
	Программа должна очистить стек и вывести ok.

	exit
	Программа должна вывести bye и завершить работу.

Перед исполнением операций back и pop программа должна проверять, 
содержится ли в стеке хотя бы один элемент. Если во входных данных 
встречается операция back или pop, и при этом стек пуст, 
то программа должна вместо числового значения вывести строку error.

'''

class myStack:

	def __init__(self):
		stack = deque()


	# Добавить в стек число n (значение n задается после команды). 
	# Программа должна вывести ok.	
	def push(self, n):
		self.stack.append(n)
		print('ok')


	# Удалить из стека последний элемент. 
	# Программа должна вывести его значение.

	# Перед исполнением операций back и pop программа должна проверять, 
	# содержится ли в стеке хотя бы один элемент. Если во входных данных 
	# встречается операция back или pop, и при этом стек пуст, 
	# то программа должна вместо числового значения вывести строку error.
	def pop(self):
		if len(self.stack) > 0:
			print(self.stack.pop(n))
		else:
			print('error')


	# Программа должна вывести значение последнего элемента, не удаляя его из стека.

	# Перед исполнением операций back и pop программа должна проверять, 
	# содержится ли в стеке хотя бы один элемент. Если во входных данных 
	# встречается операция back или pop, и при этом стек пуст, 
	# то программа должна вместо числового значения вывести строку error.
	def back(self):
		if len(self.stack) > 0:
			print(self.stack[-1])
		else:
			print('error')


	# Программа должна вывести количество элементов в стеке.
	def size(self):
		print(len(self.stack))


	# Программа должна очистить стек и вывести ok.
	def clear(self):
		self.stack.clear()


	# Программа должна вывести bye и завершить работу.
	def exit(self):
		print('buy')


def run(iter_obj):
	for i in iter_obj:
		print(i)

# inp = sys.stdin.read().strip()
# inp = inp.split('\n')
# run(inp)


t = 'push 3 \n push 14 \n size \n clear \n push 1 \n back \n push 2 \n back \n pop \n size \n pop \n size \n exit'
inp = t.split('\n')
run(inp)